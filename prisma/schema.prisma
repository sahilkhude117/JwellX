
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator seed {
    provider = "prisma-client-js"
}

// User Management
model User {
  id            String     @id @default(uuid()) 
  username      String     @unique
  email         String?     @unique
  emailVerified Boolean    @default(false)
  verificationToken String?
  password      String
  name          String
  resetToken    String?
  resetTokenExpiry DateTime?
  role          UserRole
  active        Boolean    @default(true)
  lastLoginAt   DateTime?
  hasCompletedOnboarding Boolean @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  shop          Shop       @relation(fields: [shopId], references: [id])
  shopId        String
  sales         Sale[]
  auditLogs     AuditLog[]

  @@index([shopId, role, active])
  @@index([username])
}

enum UserRole {
  OWNER
  SALES_STAFF
  ARTISAN     // For future use
  ACCOUNTANT  // For future use
}

// Shop Settings
model Shop {
  id            String         @id @default(uuid())
  name          String
  address       String?
  gstin         String?        @unique
  contactNumber String?  
  email         String?
  logoUrl       String?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  settings      ShopSettings?
  users         User[]
  inventory     InventoryItem[]
  sales         Sale[]
  customers     Customer[]

  categories    Category[]
  brands        Brand[]
  products      Product[]
  materials     Material[]
  gemstones     Gemstone[]

  @@index([active])
}

model ShopSettings {
  id                        String     @id @default(uuid())
  defaultMakingChargeType   ChargeType @default(PERCENTAGE)
  defaultMakingChargeValue  Float      @default(10.0)
  gstGoldRate               Float      @default(3.0)
  gstMakingRate             Float      @default(5.0)
  primaryLanguage           String     @default("en") // For language preference
  billingPrefix             String     @default("INV") // For bill numbering
  nextBillNumber            Int        @default(1)    // Auto-increment counter for billing
  invoiceTemplateId         String?
  shop                      Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId                    String     @unique
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
}

model InvoiceTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  previewUrl  String   // URL to preview image
  templateType String  // 'classic', 'modern', 'minimal', etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, templateType])
}

enum ChargeType {
  PERCENTAGE
  PER_GRAM
  FIXED
}

model Category {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  products      Product[]

  @@index([shopId])
  @@unique([shopId, name])
}

model Brand {
  id            String  @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String

  products    Product[]

  @@unique([shopId, name])
  @@index([shopId])
}

model Material {
  id            String @id @default(uuid())
  name          String
  type          MaterialType
  purity        String
  defaultRate   Float @default(0) // last enter purchase/base rate
  unit          String @default("g")
  created       DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop        Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String

  variantMaterials VariantMaterial[]

  @@unique([shopId, name, purity])
  @@index([shopId])
}

enum MaterialType {
  GOLD
  SILVER
  PLATINUM
  PALLADIUM
  OTHER
}

model Gemstone {
  id           String @id @default(uuid())
  name         String
  shape        GemstoneShape
  clarity      String
  color        String
  defaultRate  Float @default(0)
  unit         String @default("ct")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shop        Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String

  variantGemstones VariantGemstone[]

  @@unique([shopId, name, shape, clarity, color])
  @@index([shopId])
}

enum GemstoneShape {
  ROUND
  OVAL
  PEAR 
  EMERALD
  PRINCESS
  MARQUISE
  OTHER
}

model Product {
  id          String @id @default(uuid())
  name        String
  sku         String @unique
  description String? 
  hsnCode     String?
  imageUrls   String[]
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  brandId     String?
  brand       Brand?   @relation(fields: [brandId], references: [id])

  shop        Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId      String

  attributes  ProductAttribute[]
  variants    Variant[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([shopId, sku])
  @@index([shopId])
}

model ProductAttribute {
  id           String @id @default(uuid())
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name         String
  value        String

  @@unique([productId, name])
}

model Variant {
  id           String @id @default(uuid())
  productId    String
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sku          String @unique
  totalWeight  Float
  makingCharge Float
  wastage      Float?
  quantity     Int

  materials    VariantMaterial[]
  gemstones    VariantGemstone[]

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([productId])
}

model VariantMaterial {
  id           String @id @default(uuid())
  variantId    String
  variant      Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  materialId   String
  material     Material @relation(fields: [materialId], references: [id])

  purity       String
  weight       Float
  rate         Float

  @@unique([variantId, materialId, purity])
}

model VariantGemstone {
  id           String @id @default(uuid())
  variantId    String
  variant      Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  gemstoneId   String
  gemstone     Gemstone @relation(fields: [gemstoneId], references: [id])

  caratWeight  Float
  cut          String?
  color           String?
  clarity         String?
  certificationId String?
  rate            Float 

  @@unique([variantId, gemstoneId, caratWeight, cut, color, clarity])
}

model InventoryItem {
  id              String          @id @default(uuid())
  name            String
  itemCode        String?         // Optional internal code
  huid            String?         // HUID from hallmarking
  category        JewelryCategory
  weight          Float           // Weight in grams
  purity          String          // e.g., "22K", "24K", "18K"
  costPrice       Float
  sellingPrice    Float
  makingChargeType ChargeType
  makingChargeValue Float
  status          ItemStatus      @default(IN_STOCK)
  shop            Shop            @relation(fields: [shopId], references: [id])
  shopId          String
  saleItems       SaleItem[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Optimized indexes for common query patterns
  @@index([shopId, status])
  @@index([shopId, category, status])
  @@index([huid]) 

}

enum JewelryCategory {
  RING
  CHAIN
  NECKLACE
  BANGLE
  BRACELET
  EARRING
  PENDANT
  OTHER
}

enum ItemStatus {
  IN_STOCK
  SOLD
  RESERVED
}

// Sales Management with partitioning strategy for high volume
model Sale {
  id            String        @id @default(uuid())
  billNumber    String       
  billPrefix    String       // Store prefix separate for better querying
  billSeqNumber Int          // Store sequence number separate for better querying
  saleDate      DateTime      @default(now())
  customer      Customer?     @relation(fields: [customerId], references: [id])
  customerId    String?
  items         SaleItem[]
  subtotal      Float
  discount      Float         @default(0)
  discountType  DiscountType  @default(AMOUNT)
  gstAmount     Float
  totalAmount   Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(COMPLETED)
  paymentDetails Json?        // For storing payment gateway details
  shop          Shop          @relation(fields: [shopId], references: [id])
  shopId        String
  createdBy     User          @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Optimized for high-volume querying
  @@unique([shopId, billNumber])
  @@index([shopId, billSeqNumber(sort: Desc)])
  @@index([shopId, saleDate(sort: Desc)])
  @@index([customerId, saleDate(sort: Desc)])
  @@index([shopId, paymentStatus])
  @@index([userId, saleDate(sort: Desc)])
}

model SaleItem {
  id              String        @id @default(uuid())
  sale            Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId          String
  item            InventoryItem @relation(fields: [itemId], references: [id])
  itemId          String
  goldRate        Float         // Rate at the time of sale
  goldValue       Float         // Gold value portion
  makingCharge    Float         // Making charge portion
  gstOnGold       Float         // GST amount on gold
  gstOnMaking     Float         // GST amount on making
  totalAmount     Float
  createdAt       DateTime      @default(now())

  @@index([saleId])
  @@index([itemId, saleId])
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Customer Management with optimized search capabilities
model Customer {
  id            String    @id @default(uuid())
  name          String
  phoneNumber   String
  email         String?
  address       String?
  shop          Shop      @relation(fields: [shopId], references: [id])
  shopId        String
  sales         Sale[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([shopId, phoneNumber]) // Trigram index for fast name search
}

// Audit Logging with retention policy support
model AuditLog {
  id            String    @id @default(uuid())
  action        String
  entityType    String
  entityId      String
  description   String
  metadata      Json?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  // Month partition for efficient pruning of old logs
  yearMonth     String    @default(dbgenerated("to_char(now(), 'YYYY-MM')"))

  @@index([userId, createdAt(sort: Desc)])
  @@index([entityType, entityId])
  @@index([yearMonth, createdAt]) // For efficient log retention management
}