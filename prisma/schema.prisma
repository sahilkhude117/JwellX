generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator seed {
    provider = "prisma-client-js"
}

model User {
  id            String     @id @default(uuid()) 
  username      String     @unique
  email         String?     @unique
  emailVerified Boolean    @default(false)
  verificationToken String?
  password      String
  name          String
  resetToken    String?
  resetTokenExpiry DateTime?
  role          UserRole
  active        Boolean    @default(true)
  lastLoginAt   DateTime?
  hasCompletedOnboarding Boolean @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  shop          Shop       @relation(fields: [shopId], references: [id])
  shopId        String
  sales         Sale[]
  auditLogs     AuditLog[]
  
  // ADDED ALL BACK RELATIONS (critical fixes)
  inventoryItemsCreatedBy InventoryItem[] @relation("InventoryItemCreatedBy")
  inventoryItemsUpdatedBy InventoryItem[] @relation("InventoryItemUpdatedBy")
  stockAdjustments        StockAdjustment[] @relation("StockAdjustmentByUser")
  purchaseHistory         PurchaseHistory[] @relation("PurchaseHistoryByUser")

  @@index([shopId, role, active])
  @@index([username])
}

enum UserRole {
  OWNER
  SALES_STAFF
  ARTISAN     // For future use
  ACCOUNTANT  // For future use
}

// Shop Settings (updated with all back relations)
model Shop {
  id            String         @id @default(uuid())
  name          String
  address       String?
  gstin         String?        @unique
  contactNumber String?  
  email         String?
  logoUrl       String?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  settings      ShopSettings?
  users         User[]
  inventory     InventoryItem[]
  sales         Sale[]
  customers     Customer[]

  categories    Category[]
  brands        Brand[]
  materials     Material[]
  gemstones     Gemstone[]
  
  // ADDED ALL BACK RELATIONS (critical fixes)
  suppliers             Supplier[] @relation("SupplierShop")
  stockAdjustments      StockAdjustment[] @relation("StockAdjustmentShop")
  purchaseHistory       PurchaseHistory[] @relation("PurchaseHistoryShop")

  @@index([active])
}

model ShopSettings {
  id                        String     @id @default(uuid())
  defaultMakingChargeType   ChargeType @default(PERCENTAGE)
  defaultMakingChargeValue  Float      @default(10.0)
  gstGoldRate               Float      @default(3.0)
  gstMakingRate             Float      @default(5.0)
  primaryLanguage           String     @default("en") // For language preference
  billingPrefix             String     @default("INV") // For bill numbering
  nextBillNumber            Int        @default(1)    // Auto-increment counter for billing
  invoiceTemplateId         String?
  shop                      Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId                    String     @unique
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
}

model InvoiceTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  previewUrl  String   // URL to preview image
  templateType String  // 'classic', 'modern', 'minimal', etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, templateType])
}

enum ChargeType {
  PERCENTAGE
  PER_GRAM
  FIXED
}

// Category (updated relationship)
model Category {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItem[]  // Replaced products

  @@index([shopId])
  @@unique([shopId, name])
}

// Brand (updated relationship)
model Brand {
  id            String  @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItem[]  // Replaced products

  @@unique([shopId, name])
  @@index([shopId])
}

// Material (updated relationship)
model Material {
  id            String @id @default(uuid())
  name          String
  type          MaterialType
  purity        String
  defaultRate   Float @default(0)
  unit          String @default("g")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItemMaterial[]  // Replaced variantMaterials

  @@unique([shopId, name, purity])
  @@index([shopId])
}

enum MaterialType {
  GOLD
  SILVER
  PLATINUM
  PALLADIUM
  OTHER
}

// Gemstone (updated relationship)
model Gemstone {
  id           String @id @default(uuid())
  name         String
  shape        GemstoneShape
  clarity      String
  color        String
  defaultRate  Float @default(0)
  unit         String @default("ct")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shop          Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItemGemstone[]  // Replaced variantGemstones

  @@unique([shopId, name, shape, clarity, color])
  @@index([shopId])
}

enum GemstoneShape {
  ROUND
  OVAL
  PEAR 
  EMERALD
  PRINCESS
  MARQUISE
  OTHER
}

// NEW SUPPLIER MODULE (fixed relations)
model Supplier {
  id            String          @id @default(uuid())
  name          String
  contactNumber String
  email         String?
  address       String?
  gstin         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  shop          Shop            @relation("SupplierShop", fields: [shopId], references: [id])
  shopId        String
  inventory     InventoryItem[]
  purchases     PurchaseHistory[]

  @@index([shopId])
  @@index([name])
  @@unique([shopId, contactNumber])
}

// INVENTORY MODULE (COMPLETE RESTRUCTURE)
model InventoryItem {
  id                String                  @id @default(uuid())
  name              String
  sku               String                  @unique
  description       String?
  hsnCode           String?
  huid              String?                 // Optional HUID
  grossWeight       Float                   // Total weight in grams (material + gemstone converted)
  wastage           Float?                  // Percentage or value
  quantity          Int                     @default(1)
  location          String?                 // Storage location in shop
  sellingPrice      Float                   // Auto-calculated for reporting
  isRawMaterial     Boolean                 @default(false)
  status            InventoryItemStatus     @default(IN_STOCK)
  
  // Product attributes (atomic fields per 4NF)
  gender            String?                 // e.g., "Male", "Female", "Unisex"
  occasion          String?                 // e.g., "Wedding", "Casual"
  style             String?                 // e.g., "Traditional", "Modern"
  
  // Pricing structure
  makingChargeType  ChargeType
  makingChargeValue Float
  
  // Relationships
  shop              Shop                    @relation(fields: [shopId], references: [id])
  shopId            String
  category          Category                @relation(fields: [categoryId], references: [id])
  categoryId        String
  brand             Brand?                  @relation(fields: [brandId], references: [id])
  brandId           String?
  supplier          Supplier?               @relation(fields: [supplierId], references: [id])
  supplierId        String?
  
  // FIXED RELATIONS WITH EXPLICIT NAMES
  createdBy         User                    @relation("InventoryItemCreatedBy", fields: [createdById], references: [id])
  createdById       String
  updatedBy         User                    @relation("InventoryItemUpdatedBy", fields: [updatedById], references: [id])
  updatedById       String
  
  materials         InventoryItemMaterial[]
  gemstones         InventoryItemGemstone[]
  stockAdjustments  StockAdjustment[]
  saleItems         SaleItem[]
  purchaseHistory   PurchaseHistoryItem[]   // For purchase traceability

  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  // Optimized indexes for reporting
  @@index([shopId, status, createdAt])
  @@index([shopId, categoryId, status])
  @@index([shopId, brandId, status])
  @@index([shopId, supplierId])
  @@index([huid]) 
  @@index([isRawMaterial, status])
}

enum InventoryItemStatus {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
}

// NEW: INVENTORY COMPOSITION (4NF COMPLIANT)
model InventoryItemMaterial {
  id           String   @id @default(uuid())
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  inventoryItemId String
  material     Material @relation(fields: [materialId], references: [id])
  materialId   String
  weight       Float    // Per-piece weight in grams
  buyingPrice  Float    // Per-gram price at purchase

  @@unique([inventoryItemId, materialId])
  @@index([materialId])
}

model InventoryItemGemstone {
  id           String   @id @default(uuid())
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  inventoryItemId String
  gemstone     Gemstone @relation(fields: [gemstoneId], references: [id])
  gemstoneId   String
  weight       Float    // Per-piece weight in carats
  buyingPrice  Float    // Per-carat price at purchase

  @@unique([inventoryItemId, gemstoneId])
  @@index([gemstoneId])
}

// NEW: STOCK ADJUSTMENT TRACKING (fixed relations)
model StockAdjustment {
  id          String                @id @default(uuid())
  inventoryItem InventoryItem      @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  adjustment  Int                   // Positive = increase, Negative = decrease
  reason      String                // e.g., "damage", "theft", "count adjustment"
  adjustedBy  User                  @relation("StockAdjustmentByUser", fields: [userId], references: [id])
  userId      String
  shop        Shop                  @relation("StockAdjustmentShop", fields: [shopId], references: [id])
  shopId      String
  createdAt   DateTime              @default(now())

  @@index([inventoryItemId, createdAt(sort: Desc)])
  @@index([shopId, createdAt(sort: Desc)])
  @@index([shopId, userId, createdAt])
}

// NEW: PURCHASE HISTORY (fixed relations)
model PurchaseHistory {
  id            String              @id @default(uuid())
  shop          Shop                @relation("PurchaseHistoryShop", fields: [shopId], references: [id])
  shopId        String
  supplier      Supplier            @relation(fields: [supplierId], references: [id])
  supplierId    String
  purchaseDate  DateTime            @default(now())
  totalAmount   Float
  createdBy     User                @relation("PurchaseHistoryByUser", fields: [userId], references: [id])
  userId        String
  items         PurchaseHistoryItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([shopId, purchaseDate(sort: Desc)])
  @@index([shopId, supplierId])
}

model PurchaseHistoryItem {
  id              String            @id @default(uuid())
  purchaseHistory PurchaseHistory  @relation(fields: [purchaseHistoryId], references: [id], onDelete: Cascade)
  purchaseHistoryId String
  inventoryItem   InventoryItem     @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  quantity        Int
  unitPrice       Float             // Per-piece purchase price
  createdAt       DateTime          @default(now())

  @@index([purchaseHistoryId])
  @@index([inventoryItemId])
}

// Sales Management (unchanged except inventory references)
model Sale {
  id            String        @id @default(uuid())
  billNumber    String       
  billPrefix    String       
  billSeqNumber Int          
  saleDate      DateTime      @default(now())
  customer      Customer?     @relation(fields: [customerId], references: [id])
  customerId    String?
  items         SaleItem[]
  subtotal      Float
  discount      Float         @default(0)
  discountType  DiscountType  @default(AMOUNT)
  gstAmount     Float
  totalAmount   Float
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(COMPLETED)
  paymentDetails Json?        
  shop          Shop          @relation(fields: [shopId], references: [id])
  shopId        String
  createdBy     User          @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([shopId, billNumber])
  @@index([shopId, billSeqNumber(sort: Desc)])
  @@index([shopId, saleDate(sort: Desc)])
  @@index([customerId, saleDate(sort: Desc)])
  @@index([shopId, paymentStatus])
  @@index([userId, saleDate(sort: Desc)])
}

model SaleItem {
  id              String        @id @default(uuid())
  sale            Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId          String
  item            InventoryItem @relation(fields: [itemId], references: [id])
  itemId          String
  goldRate        Float         
  goldValue       Float         
  makingCharge    Float         
  gstOnGold       Float         
  gstOnMaking     Float         
  totalAmount     Float
  createdAt       DateTime      @default(now())

  @@index([saleId])
  @@index([itemId, saleId])
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  OTHER
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// Customer Management (unchanged)
model Customer {
  id            String    @id @default(uuid())
  name          String
  phoneNumber   String
  email         String?
  address       String?
  shop          Shop      @relation(fields: [shopId], references: [id])
  shopId        String
  sales         Sale[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([shopId, phoneNumber])
}

// Audit Logging (unchanged)
model AuditLog {
  id            String    @id @default(uuid())
  action        String
  entityType    String
  entityId      String
  description   String
  metadata      Json?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  yearMonth     String    @default(dbgenerated("to_char(now(), 'YYYY-MM')"))

  @@index([userId, createdAt(sort: Desc)])
  @@index([entityType, entityId])
  @@index([yearMonth, createdAt])
}