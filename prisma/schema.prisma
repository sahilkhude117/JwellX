generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator seed {
    provider = "prisma-client-js"
}

model User {
  id            String     @id @default(uuid()) 
  username      String     @unique
  email         String?     @unique
  emailVerified Boolean    @default(false)
  verificationToken String?
  password      String
  name          String
  resetToken    String?
  resetTokenExpiry DateTime?
  role          UserRole
  active        Boolean    @default(true)
  lastLoginAt   DateTime?
  hasCompletedOnboarding Boolean @default(false)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  shop          Shop       @relation(fields: [shopId], references: [id])
  shopId        String
  sales         Sale[]
  auditLogs     AuditLog[]
  
  // ADDED ALL BACK RELATIONS (critical fixes)
  inventoryItemsCreatedBy InventoryItem[] @relation("InventoryItemCreatedBy")
  inventoryItemsUpdatedBy InventoryItem[] @relation("InventoryItemUpdatedBy")
  stockAdjustments        StockAdjustment[] @relation("StockAdjustmentByUser")
  purchaseHistory         PurchaseHistory[] @relation("PurchaseHistoryByUser")
  salePayments           SalePayment[]   // NEW: Track payment processing
  
  // POS session relations
  posSessionsOpened      PosSession[] @relation("PosSessionOpenedBy")
  posSessionsClosed      PosSession[] @relation("PosSessionClosedBy")
  
  // Sale return relations
  saleReturnsProcessed   SaleReturn[] @relation("SaleReturnProcessedBy")
  saleReturnsApproved    SaleReturn[] @relation("SaleReturnApprovedBy")
  
  // Rate tracking relations
  materialRatesUpdated   MaterialRate[]
  gemstoneRatesUpdated   GemstoneRate[]

  @@index([shopId, role, active])
  @@index([username])
}

enum UserRole {
  OWNER
  SALES_STAFF
  ARTISAN     // For future use
  ACCOUNTANT  // For future use
}

// Shop Settings (updated with all back relations)
model Shop {
  id            String         @id @default(uuid())
  name          String
  address       String?
  gstin         String?        @unique
  contactNumber String?  
  email         String?
  logoUrl       String?
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  settings      ShopSettings?
  users         User[]
  inventory     InventoryItem[]
  sales         Sale[]
  customers     Customer[]

  categories    Category[]
  brands        Brand[]
  materials     Material[]
  gemstones     Gemstone[]
  
  // ADDED ALL BACK RELATIONS (critical fixes)
  suppliers             Supplier[] @relation("SupplierShop")
  stockAdjustments      StockAdjustment[] @relation("StockAdjustmentShop")
  purchaseHistory       PurchaseHistory[] @relation("PurchaseHistoryShop")
  salePayments         SalePayment[]  // NEW: Track payments
  
  // New models relations
  posSessions          PosSession[]
  dailySalesSummaries  DailySalesSummary[]
  saleReturns          SaleReturn[]
  materialRates        MaterialRate[]
  gemstoneRates        GemstoneRate[]

  @@index([active])
}

model ShopSettings {
  id                        String     @id @default(uuid())
  defaultMakingChargeType   ChargeType @default(PERCENTAGE)
  defaultMakingChargeValue  Float      @default(10.0)
  gstGoldRate               Float      @default(3.0)
  gstMakingRate             Float      @default(5.0)
  primaryLanguage           String     @default("en") // For language preference
  billingPrefix             String     @default("INV") // For bill numbering
  nextBillNumber            Int        @default(1)    // Auto-increment counter for billing
  invoiceTemplateId         String?
  shop                      Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId                    String     @unique
  createdAt                 DateTime   @default(now())
  updatedAt                 DateTime   @updatedAt
}

model InvoiceTemplate {
  id          String   @id @default(uuid())
  name        String
  description String?
  previewUrl  String   // URL to preview image
  templateType String  // 'classic', 'modern', 'minimal', etc.
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive, templateType])
}

enum ChargeType {
  PERCENTAGE
  PER_GRAM
  FIXED
}

// Category (updated relationship)
model Category {
  id            String         @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItem[]  // Replaced products

  @@index([shopId])
  @@unique([shopId, name])
}

// Brand (updated relationship)
model Brand {
  id            String  @id @default(uuid())
  name          String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop           @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItem[]  // Replaced products

  @@unique([shopId, name])
  @@index([shopId])
}

// Material (updated relationship)
model Material {
  id            String @id @default(uuid())
  name          String
  type          MaterialType
  purity        String
  defaultRate   Float @default(0)
  unit          String @default("g")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  shop          Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItemMaterial[]  // Replaced variantMaterials
  saleItemMaterials SaleItemMaterial[]   // NEW: Track material sales
  materialRates  MaterialRate[]           // NEW: Track rate changes

  @@unique([shopId, name, purity])
  @@index([shopId])
}

enum MaterialType {
  GOLD
  SILVER
  PLATINUM
  PALLADIUM
  OTHER
}

// Gemstone (updated relationship)
model Gemstone {
  id           String @id @default(uuid())
  name         String
  shape        GemstoneShape
  clarity      String
  color        String
  defaultRate  Float @default(0)
  unit         String @default("ct")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  shop          Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId        String

  inventoryItems InventoryItemGemstone[]  // Replaced variantGemstones
  saleItemGemstones SaleItemGemstone[]   // NEW: Track gemstone sales
  gemstoneRates  GemstoneRate[]           // NEW: Track rate changes

  @@unique([shopId, name, shape, clarity, color])
  @@index([shopId])
}

enum GemstoneShape {
  ROUND
  OVAL
  PEAR 
  EMERALD
  PRINCESS
  MARQUISE
  OTHER
}

// NEW SUPPLIER MODULE (fixed relations)
model Supplier {
  id            String          @id @default(uuid())
  name          String
  contactNumber String
  email         String?
  address       String?
  gstin         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  shop          Shop            @relation("SupplierShop", fields: [shopId], references: [id])
  shopId        String
  inventory     InventoryItem[]
  purchases     PurchaseHistory[]

  @@index([shopId])
  @@index([name])
  @@unique([shopId, contactNumber])
}

// INVENTORY MODULE (COMPLETE RESTRUCTURE)
model InventoryItem {
  id                String                  @id @default(uuid())
  name              String
  sku               String                  @unique
  description       String?
  hsnCode           String?
  huid              String?                 // Optional HUID
  grossWeight       Float                   // Total weight in grams (material + gemstone converted)
  wastage           Float?                  // Percentage or value
  quantity          Int                     @default(1)
  location          String?                 // Storage location in shop
  sellingPrice      Float                   // Auto-calculated for reporting
  isRawMaterial     Boolean                 @default(false)
  status            InventoryItemStatus     @default(IN_STOCK)
  
  // Product attributes (atomic fields per 4NF)
  gender            String?                 // e.g., "Male", "Female", "Unisex"
  occasion          String?                 // e.g., "Wedding", "Casual"
  style             String?                 // e.g., "Traditional", "Modern"
  
  // Pricing structure
  makingChargeType  ChargeType
  makingChargeValue Float
  buyingPrice       Float?                  // Total buying price for the item

  // Relationships
  shop              Shop                    @relation(fields: [shopId], references: [id])
  shopId            String
  category          Category                @relation(fields: [categoryId], references: [id])
  categoryId        String
  brand             Brand?                  @relation(fields: [brandId], references: [id])
  brandId           String?
  supplier          Supplier?               @relation(fields: [supplierId], references: [id])
  supplierId        String?
  
  // FIXED RELATIONS WITH EXPLICIT NAMES
  createdBy         User                    @relation("InventoryItemCreatedBy", fields: [createdById], references: [id])
  createdById       String
  updatedBy         User                    @relation("InventoryItemUpdatedBy", fields: [updatedById], references: [id])
  updatedById       String
  
  materials         InventoryItemMaterial[]
  gemstones         InventoryItemGemstone[]
  stockAdjustments  StockAdjustment[]
  saleItems         SaleItem[]
  purchaseHistory   PurchaseHistoryItem[]   // For purchase traceability

  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt

  // Optimized indexes for reporting
  @@index([shopId, status, createdAt])
  @@index([shopId, categoryId, status])
  @@index([shopId, brandId, status])
  @@index([shopId, supplierId])
  @@index([huid]) 
  @@index([isRawMaterial, status])
}

enum InventoryItemStatus {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
}

// NEW: INVENTORY COMPOSITION (4NF COMPLIANT)
model InventoryItemMaterial {
  id           String   @id @default(uuid())
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  inventoryItemId String
  material     Material @relation(fields: [materialId], references: [id])
  materialId   String
  weight       Float    // Per-piece weight in grams
  buyingPrice  Float    // Per-gram price at purchase

  @@unique([inventoryItemId, materialId])
  @@index([materialId])
}

model InventoryItemGemstone {
  id           String   @id @default(uuid())
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  inventoryItemId String
  gemstone     Gemstone @relation(fields: [gemstoneId], references: [id])
  gemstoneId   String
  weight       Float    // Per-piece weight in carats
  buyingPrice  Float    // Per-carat price at purchase

  @@unique([inventoryItemId, gemstoneId])
  @@index([gemstoneId])
}

// NEW: STOCK ADJUSTMENT TRACKING (fixed relations)
model StockAdjustment {
  id          String                @id @default(uuid())
  inventoryItem InventoryItem      @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  adjustment  Int                   // Positive = increase, Negative = decrease
  reason      String                // e.g., "damage", "theft", "count adjustment"
  adjustedBy  User                  @relation("StockAdjustmentByUser", fields: [userId], references: [id])
  userId      String
  shop        Shop                  @relation("StockAdjustmentShop", fields: [shopId], references: [id])
  shopId      String
  createdAt   DateTime              @default(now())

  @@index([inventoryItemId, createdAt(sort: Desc)])
  @@index([shopId, createdAt(sort: Desc)])
  @@index([shopId, userId, createdAt])
}

// NEW: PURCHASE HISTORY (fixed relations)
model PurchaseHistory {
  id            String              @id @default(uuid())
  shop          Shop                @relation("PurchaseHistoryShop", fields: [shopId], references: [id])
  shopId        String
  supplier      Supplier            @relation(fields: [supplierId], references: [id])
  supplierId    String
  purchaseDate  DateTime            @default(now())
  totalAmount   Float
  createdBy     User                @relation("PurchaseHistoryByUser", fields: [userId], references: [id])
  userId        String
  items         PurchaseHistoryItem[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([shopId, purchaseDate(sort: Desc)])
  @@index([shopId, supplierId])
}

model PurchaseHistoryItem {
  id              String            @id @default(uuid())
  purchaseHistory PurchaseHistory  @relation(fields: [purchaseHistoryId], references: [id], onDelete: Cascade)
  purchaseHistoryId String
  inventoryItem   InventoryItem     @relation(fields: [inventoryItemId], references: [id])
  inventoryItemId String
  quantity        Int
  unitPrice       Float             // Per-piece purchase price
  createdAt       DateTime          @default(now())

  @@index([purchaseHistoryId])
  @@index([inventoryItemId])
}

model Sale {
  id                    String           @id @default(uuid())
  billNumber            String       
  billPrefix            String       
  billSeqNumber         Int          
  saleDate              DateTime         @default(now())
  customer              Customer?        @relation(fields: [customerId], references: [id])
  customerId            String?
  items                 SaleItem[]
  
  // Enhanced pricing breakdown
  subtotal              Float            // Sum of all item totals before discount
  itemLevelDiscount     Float            @default(0) // Total discount applied at item level
  saleLevelDiscount     Float            @default(0) // Additional sale level discount
  saleLevelDiscountType DiscountType     @default(AMOUNT)
  totalDiscount         Float            @default(0) // itemLevelDiscount + saleLevelDiscount
  
  // GST breakdown
  gstOnMaterials        Float            @default(0)
  gstOnGemstones        Float            @default(0) 
  gstOnMaking           Float            @default(0)
  totalGstAmount        Float            @default(0)
  
  // Final totals
  netAmount             Float            // subtotal - totalDiscount
  totalAmount           Float            // netAmount + totalGstAmount
  roundOffAmount        Float            @default(0) // For rounding to nearest rupee
  finalAmount           Float            // totalAmount + roundOffAmount
  
  // Transaction workflow
  status                SaleStatus       @default(DRAFT)
  posSessionId          String?          // Link to POS session for tracking
  
  // Payment tracking
  payments              SalePayment[]
  totalPaidAmount       Float            @default(0)
  balanceAmount         Float            @default(0)
  paymentStatus         PaymentStatus    @default(PENDING)
  
  // Invoice tracking
  invoiceGenerated      Boolean          @default(false)
  invoiceNumber         String?          @unique
  invoiceUrl            String?          // PDF storage URL
  emailSent             Boolean          @default(false)
  printCount            Int              @default(0)
  
  // Relations
  shop                  Shop             @relation(fields: [shopId], references: [id])
  shopId                String
  createdBy             User             @relation(fields: [userId], references: [id])
  userId                String
  posSession            PosSession?      @relation(fields: [posSessionId], references: [id])
  
  // Back relations
  returns               SaleReturn[]
  
  // Audit fields
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  completedAt           DateTime?        // When sale was finalized

  @@unique([shopId, billNumber])
  @@unique([shopId, invoiceNumber])
  @@index([shopId, billSeqNumber(sort: Desc)])
  @@index([shopId, saleDate(sort: Desc)])
  @@index([customerId, saleDate(sort: Desc)])
  @@index([shopId, paymentStatus])
  @@index([userId, saleDate(sort: Desc)])
  @@index([posSessionId])
  @@index([status]) // Status index separate
}

model SaleItem {
  id                    String        @id @default(uuid())
  sale                  Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId                String
  item                  InventoryItem @relation(fields: [itemId], references: [id])
  itemId                String
  quantity              Int           @default(1)
  
  // Material pricing breakdown (captured at sale time)
  materialBreakdown     SaleItemMaterial[]
  totalMaterialWeight   Float         // Sum of all materials in grams
  totalMaterialValue    Float         // Sum of all material values
  
  // Gemstone pricing breakdown (captured at sale time)
  gemstoneBreakdown     SaleItemGemstone[]
  totalGemstoneWeight   Float         // Sum of all gemstones in carats
  totalGemstoneValue    Float         // Sum of all gemstone values
  
  // Making charges
  makingChargeType      ChargeType    // From item or shop default
  makingChargeRate      Float         // Rate applied
  grossWeight           Float         // Weight for making charge calculation
  wastagePercentage     Float         @default(0)
  makingChargeAmount    Float         // Calculated making charge
  
  // Item level pricing
  baseAmount            Float         // materialValue + gemstoneValue + makingCharge
  
  // Discount at item level
  discountType          DiscountType  @default(AMOUNT)
  discountValue         Float         @default(0) // Percentage or amount
  discountAmount        Float         @default(0) // Actual discount applied
  amountAfterDiscount   Float         // baseAmount - discountAmount
  
  // GST breakdown per item
  gstOnMaterials        Float         @default(0)
  gstOnGemstones        Float         @default(0)
  gstOnMaking           Float         @default(0)
  totalGstAmount        Float         @default(0)
  
  // Final item total
  totalAmount           Float         // amountAfterDiscount + totalGstAmount
  
  // Rate tracking for audit/reports
  goldRate              Float?        // Gold rate at sale time (if applicable)
  silverRate            Float?        // Silver rate at sale time (if applicable)
  
  // Item customization (if any)
  customization         String?       // Special requests/modifications
  notes                 String?       // Any special notes
  
  // Back relations
  returnItems           SaleReturnItem[]
  
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  @@index([saleId])
  @@index([itemId, saleId])
  @@index([saleId, createdAt])
}

// Detailed material breakdown for each sale item
model SaleItemMaterial {
  id                String        @id @default(uuid())
  saleItem          SaleItem      @relation(fields: [saleItemId], references: [id], onDelete: Cascade)
  saleItemId        String
  material          Material      @relation(fields: [materialId], references: [id])
  materialId        String
  
  // Material details at sale time
  materialName      String        // Captured for audit trail
  materialType      MaterialType  // Captured for audit trail
  purity            String        // Captured for audit trail
  
  // Pricing details
  weight            Float         // Weight in grams
  ratePerGram       Float         // Rate per gram at sale time
  totalValue        Float         // weight * ratePerGram
  gstRate           Float         // GST rate applied
  gstAmount         Float         // GST amount calculated
  
  createdAt         DateTime      @default(now())

  @@unique([saleItemId, materialId])
  @@index([materialId])
}

// Detailed gemstone breakdown for each sale item  
model SaleItemGemstone {
  id                String        @id @default(uuid())
  saleItem          SaleItem      @relation(fields: [saleItemId], references: [id], onDelete: Cascade)
  saleItemId        String
  gemstone          Gemstone      @relation(fields: [gemstoneId], references: [id])
  gemstoneId        String
  
  // Gemstone details at sale time
  gemstoneName      String        // Captured for audit trail
  shape             GemstoneShape // Captured for audit trail
  clarity           String        // Captured for audit trail
  color             String        // Captured for audit trail
  
  // Pricing details
  weight            Float         // Weight in carats
  ratePerCarat      Float         // Rate per carat at sale time
  totalValue        Float         // weight * ratePerCarat
  gstRate           Float         // GST rate applied
  gstAmount         Float         // GST amount calculated
  
  createdAt         DateTime      @default(now())

  @@unique([saleItemId, gemstoneId])
  @@index([gemstoneId])
}

// Payment tracking for sales
model SalePayment {
  id                String        @id @default(uuid())
  sale              Sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
  saleId            String
  
  // Payment details
  paymentMethod     PaymentMethod
  amount            Float
  paymentDate       DateTime      @default(now())
  
  // Payment method specific details
  cardNumber        String?       // Last 4 digits for card payments
  upiTransactionId  String?       // UPI transaction ID
  chequeNumber      String?       // Cheque number
  bankReference     String?       // Bank reference number
  
  // Status tracking
  status            PaymentStatus @default(PENDING)
  processedAt       DateTime?
  
  // Relations
  shop              Shop          @relation(fields: [shopId], references: [id])
  shopId            String
  processedBy       User          @relation(fields: [userId], references: [id])
  userId            String
  
  notes             String?       // Additional notes
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@index([saleId, paymentDate(sort: Desc)])
  @@index([shopId, paymentDate(sort: Desc)])
  @@index([shopId, paymentMethod, status])
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum PaymentMethod {
  CASH
  CARD
  UPI
  BANK_TRANSFER
  CHEQUE
  OTHER
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  COMPLETED
  FAILED
  REFUNDED
}

enum SaleStatus {
  DRAFT          // Sale being created in POS
  CONFIRMED      // Sale confirmed but payment pending
  COMPLETED      // Sale and payment completed
  CANCELLED      // Sale cancelled
  RETURNED       // Sale returned (partial or full)
}

// POS Session Management
model PosSession {
  id            String        @id @default(uuid())
  sessionNumber String        // Daily session number (e.g., "POS-001-20241002")
  startTime     DateTime      @default(now())
  endTime       DateTime?
  openingCash   Float         @default(0)
  closingCash   Float?
  expectedCash  Float?        // Calculated expected cash
  variance      Float?        // Difference between expected and actual
  status        PosSessionStatus @default(ACTIVE)
  
  // Daily totals
  totalSales        Float     @default(0)
  totalCashSales    Float     @default(0)
  totalCardSales    Float     @default(0)
  totalUpiSales     Float     @default(0)
  totalTransactions Int       @default(0)
  
  // Relations
  shop          Shop          @relation(fields: [shopId], references: [id])
  shopId        String
  openedBy      User          @relation("PosSessionOpenedBy", fields: [openedById], references: [id])
  openedById    String
  closedBy      User?         @relation("PosSessionClosedBy", fields: [closedById], references: [id])
  closedById    String?
  
  sales         Sale[]        // All sales in this session
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([shopId, sessionNumber])
  @@index([shopId, startTime(sort: Desc)])
  @@index([shopId, status])
}

enum PosSessionStatus {
  ACTIVE
  CLOSED
  RECONCILED
}

// Daily Sales Summary for Reports
model DailySalesSummary {
  id                String    @id @default(uuid())
  date              DateTime  // Date of the summary
  shop              Shop      @relation(fields: [shopId], references: [id])
  shopId            String
  
  // Sales metrics
  totalSales        Int       // Number of sales
  totalAmount       Float     // Total sales amount
  totalDiscount     Float     // Total discount given
  totalGst          Float     // Total GST collected
  
  // Payment method breakdown
  cashSales         Float     @default(0)
  cardSales         Float     @default(0)
  upiSales          Float     @default(0)
  otherSales        Float     @default(0)
  
  // Material sales breakdown
  goldWeight        Float     @default(0)
  goldValue         Float     @default(0)
  silverWeight      Float     @default(0)
  silverValue       Float     @default(0)
  
  // Top performing items
  topCategoryId     String?
  topBrandId        String?
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@unique([shopId, date])
  @@index([shopId, date(sort: Desc)])
}

// Return/Exchange Management
model SaleReturn {
  id                String       @id @default(uuid())
  originalSale      Sale         @relation(fields: [originalSaleId], references: [id])
  originalSaleId    String
  returnDate        DateTime     @default(now())
  returnType        ReturnType   
  reason            String
  
  // Return amounts
  returnAmount      Float        // Amount being returned
  refundAmount      Float        // Actual refund amount (may be less due to restocking fee)
  restockingFee     Float        @default(0)
  
  // Return items
  items             SaleReturnItem[]
  
  // Processing details
  shop              Shop         @relation(fields: [shopId], references: [id])
  shopId            String
  processedBy       User         @relation("SaleReturnProcessedBy", fields: [userId], references: [id])
  userId            String
  
  // Status
  status            ReturnStatus @default(PENDING)
  approvedBy        User?        @relation("SaleReturnApprovedBy", fields: [approvedById], references: [id])
  approvedById      String?
  approvedAt        DateTime?
  
  notes             String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@index([originalSaleId])
  @@index([shopId, returnDate(sort: Desc)])
  @@index([shopId, status])
}

model SaleReturnItem {
  id              String      @id @default(uuid())
  saleReturn      SaleReturn  @relation(fields: [saleReturnId], references: [id], onDelete: Cascade)
  saleReturnId    String
  originalSaleItem SaleItem   @relation(fields: [saleItemId], references: [id])
  saleItemId      String
  
  returnQuantity  Int         // Quantity being returned
  returnAmount    Float       // Amount for this item return
  condition       ItemCondition
  restockable     Boolean     @default(true)
  
  createdAt       DateTime    @default(now())

  @@index([saleReturnId])
  @@index([saleItemId])
}

enum ReturnType {
  FULL_RETURN
  PARTIAL_RETURN
  EXCHANGE
  DEFECTIVE
}

enum ReturnStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum ItemCondition {
  EXCELLENT
  GOOD
  FAIR
  DAMAGED
}

// Real-time Rate Management for POS calculations
model MaterialRate {
  id            String       @id @default(uuid())
  material      Material     @relation(fields: [materialId], references: [id])
  materialId    String
  
  // Rate details
  buyingRate    Float        // Current buying rate per gram
  sellingRate   Float        // Current selling rate per gram
  rateDate      DateTime     @default(now())
  
  // Source tracking
  source        RateSource   @default(MANUAL)
  apiProvider   String?      // API provider name if automated
  lastUpdated   DateTime     @default(now())
  isActive      Boolean      @default(true)
  
  // Market info
  marketTrend   String?      // "UP", "DOWN", "STABLE"
  dayChange     Float?       // Percentage change from previous day
  
  shop          Shop         @relation(fields: [shopId], references: [id])
  shopId        String
  updatedBy     User         @relation(fields: [userId], references: [id])
  userId        String
  
  createdAt     DateTime     @default(now())

  @@unique([materialId, rateDate, shopId])
  @@index([shopId, materialId, isActive])
  @@index([shopId, rateDate(sort: Desc)])
}

model GemstoneRate {
  id            String       @id @default(uuid())
  gemstone      Gemstone     @relation(fields: [gemstoneId], references: [id])
  gemstoneId    String
  
  // Rate details
  buyingRate    Float        // Current buying rate per carat
  sellingRate   Float        // Current selling rate per carat
  rateDate      DateTime     @default(now())
  
  // Source tracking
  source        RateSource   @default(MANUAL)
  apiProvider   String?      // API provider name if automated
  lastUpdated   DateTime     @default(now())
  isActive      Boolean      @default(true)
  
  shop          Shop         @relation(fields: [shopId], references: [id])
  shopId        String
  updatedBy     User         @relation(fields: [userId], references: [id])
  userId        String
  
  createdAt     DateTime     @default(now())

  @@unique([gemstoneId, rateDate, shopId])
  @@index([shopId, gemstoneId, isActive])
  @@index([shopId, rateDate(sort: Desc)])
}

enum RateSource {
  MANUAL      // Manually entered by user
  API         // From external API
  MARKET      // From market data feed
  SUPPLIER    // From supplier quotes
}

// Customer Management
model Customer {
  id            String    @id @default(uuid())
  name          String
  phoneNumber   String
  email         String?
  address       String?
  shop          Shop      @relation(fields: [shopId], references: [id])
  shopId        String
  sales         Sale[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([shopId, phoneNumber])
  @@index([shopId, name])
  @@index([phoneNumber])
}

// Audit Logging (unchanged)
model AuditLog {
  id            String    @id @default(uuid())
  action        String
  entityType    String
  entityId      String
  description   String
  metadata      Json?
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime  @default(now())
  yearMonth     String    @default(dbgenerated("to_char(now(), 'YYYY-MM')"))

  @@index([userId, createdAt(sort: Desc)])
  @@index([entityType, entityId])
  @@index([yearMonth, createdAt])
}
